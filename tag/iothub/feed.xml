<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/iothub/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-05-28T17:16:02+09:00</updated>
  <id>/tag/iothub/feed.xml</id>

  
  
  

  
    <title type="html">sysmoon’s blog | </title>
  

  
    <subtitle>문형권 기술블로그 (sysmoon@sk.com)</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Azure IoTHub</title>
      <link href="/azure-iotedge" rel="alternate" type="text/html" title="Azure IoTHub" />
      <published>2018-05-08T19:00:00+09:00</published>
      <updated>2018-05-08T19:00:00+09:00</updated>
      <id>/azure-iotedge</id>
      <content type="html" xml:base="/azure-iotedge">&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;
&lt;p&gt;Azure IotHub를 이용하여 다양한 IoT 디바이스를 관리하고, Telemetry 정보를 수집하여 Power BI로 분석 가능하다. 또한 IoT 디바이스를 Edge Computing으로 활용하여 IotHub 런타임 위에 ML Conference가 가능한 컨테이너를 내려 다양한 고급 분석이 가능하다.&lt;/p&gt;

&lt;h1 id=&quot;agenda&quot;&gt;Agenda&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Setup Dev Environment
    &lt;ul&gt;
      &lt;li&gt;IotHub&lt;/li&gt;
      &lt;li&gt;DPS (Device Provisioning Service)&lt;/li&gt;
      &lt;li&gt;Cosmos DB&lt;/li&gt;
      &lt;li&gt;ASA (Azure Streaming Analytics)&lt;/li&gt;
      &lt;li&gt;Storage&lt;/li&gt;
      &lt;li&gt;Etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Setup Rasp Pi&lt;/li&gt;
  &lt;li&gt;Run D2C message application on Rasp&lt;/li&gt;
  &lt;li&gt;Provision a device using Azure IoT DPS (X.509 Individual Enrollment)&lt;/li&gt;
  &lt;li&gt;D2C Message, Azure Streaming Analytics, Data Storage/DB&lt;/li&gt;
  &lt;li&gt;Custom Vision Edge module deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setup-dev-environment&quot;&gt;Setup Dev Environment&lt;/h1&gt;

&lt;h2 id=&quot;prerequsite&quot;&gt;Prerequsite&lt;/h2&gt;
&lt;p&gt;hands-on을 위해 개발 PC에 아래 도구들은 미리 설치한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visual Studio Code Extension
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.azure-iot-toolkit&quot;&gt;azure-iot-toolkit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.azure-iot-edge&quot;&gt;azure-iot-edge&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker&quot;&gt;docker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aka.ms/aziotdevexp&quot;&gt;device exploerer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/ko-kr/features/storage-explorer/&quot;&gt;Storage Explorer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;Docker CE&lt;/a&gt;&lt;br /&gt;
Install Docker Community Edition (CE). Don’t sign in Docker Desktop after Docker CE installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-azure-resources&quot;&gt;Create Azure Resources&lt;/h2&gt;

&lt;h3 id=&quot;iothub&quot;&gt;IotHub&lt;/h3&gt;
&lt;h3 id=&quot;dps&quot;&gt;DPS&lt;/h3&gt;
&lt;h3 id=&quot;asa-azure-streaming-analytics&quot;&gt;ASA (Azure Streaming Analytics)&lt;/h3&gt;
&lt;h3 id=&quot;cosmos-db&quot;&gt;Cosmos DB&lt;/h3&gt;
&lt;h3 id=&quot;storage-account&quot;&gt;Storage Account&lt;/h3&gt;

&lt;h1 id=&quot;setup-rasp-pi&quot;&gt;Setup Rasp Pi&lt;/h1&gt;

&lt;h3 id=&quot;install-the-raspbian-operating-system-for-pi&quot;&gt;Install the Raspbian operating system for Pi&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Download Raspbian.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://downloads.raspberrypi.org/raspbian/images/raspbian-2017-07-05/&quot;&gt;Download Raspbian Stretch&lt;/a&gt; (the .zip file)&lt;/li&gt;
      &lt;li&gt;Extract the Raspbian image to a folder on your computer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Raspbian to the microSD card.
    &lt;ul&gt;
      &lt;li&gt;Download and install the Etcher SD card burner utility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run Etcher and select the Raspbian image that you extracted in step 1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the microSD card drive. Etcher may have already selected the correct drive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Flash to install Raspbian to the microSD card.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove the microSD card from your computer when installation is complete. It’s safe to remove the microSD card directly because Etcher automatically ejects or unmounts the microSD card upon completion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Insert the microSD card into Pi.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;enable-ssh-and-i2c&quot;&gt;Enable SSH and I2C&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Connect Pi to the monitor, keyboard, and mouse. 2. Start Pi and then sign into Raspbian by using pi as the user name and raspberry as the&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;password.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Click the Raspberry icon &amp;gt; Preferences &amp;gt; Raspberry Pi Configuration.
&lt;img src=&quot;../assets/images/iothub/rasp_conf01.png&quot; alt=&quot;iothub_conf&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the Interfaces tab, set I2C and SSH to Enable, and then click OK. If you don’t have
&lt;img src=&quot;../assets/images/iothub/rasp_conf02.png&quot; alt=&quot;iothub_conf&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;physical sensors and want to use simulated sensor data, this step is optional.&lt;/p&gt;

&lt;p&gt;Connect the sensor to Pi (+) 방향 : 3.3V PWR
&lt;img src=&quot;../assets/images/iothub/rasp_conf_gpo01.png&quot; alt=&quot;rasp_conf_gpo01&quot; /&gt;
&lt;img src=&quot;../assets/images/iothub/rasp_conf_gpo02.png&quot; alt=&quot;rasp_conf_gpo02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;중간 : GPIO 4&lt;/p&gt;

&lt;p&gt;(-) 방향 : GND&lt;/p&gt;

&lt;p&gt;Connect Pi to the network&lt;/p&gt;

&lt;p&gt;Note IP address of your Pi.&lt;/p&gt;

&lt;h1 id=&quot;run-d2c-message-application-on-rasp&quot;&gt;Run D2C message application on Rasp&lt;/h1&gt;
&lt;p&gt;rasp pi -&amp;gt; IotHub 로 센서데이터를 전송하기 위한 샘플 예제코드는 아래 git url을 통해 다운로드 가능하다.  &lt;a href=&quot;https://github.com/Azure-Samples/azure-iot-samples-python&quot;&gt;azure-iot-samples-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```
git clone https://github.com/Azure-Samples/azure-iot-samples-python&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>문형권</name>
        
        
      </author>

      

      
        <category term="azure" />
      
        <category term="iothub" />
      

      
        <summary type="html">Introduce Azure IotHub를 이용하여 다양한 IoT 디바이스를 관리하고, Telemetry 정보를 수집하여 Power BI로 분석 가능하다. 또한 IoT 디바이스를 Edge Computing으로 활용하여 IotHub 런타임 위에 ML Conference가 가능한 컨테이너를 내려 다양한 고급 분석이 가능하다.</summary>
      

      
      
    </entry>
  
</feed>
