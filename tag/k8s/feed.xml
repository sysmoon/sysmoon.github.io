<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/k8s/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-06-04T14:15:19+09:00</updated>
  <id>/tag/k8s/feed.xml</id>

  
  
  

  
    <title type="html">sysmoon’s blog | </title>
  

  
    <subtitle>문형권 기술블로그 (sysmoon@sk.com)</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Istio Telemetry (4. Visualizing metrics with Grafana)</title>
      <link href="/istio-telemetry_visualizing_metrics_with_grafana" rel="alternate" type="text/html" title="Istio Telemetry (4. Visualizing metrics with Grafana)" />
      <published>2018-06-03T19:00:00+09:00</published>
      <updated>2018-06-03T19:00:00+09:00</updated>
      <id>/istio-telemetry_visualizing_metrics_with_grafana</id>
      <content type="html" xml:base="/istio-telemetry_visualizing_metrics_with_grafana">&lt;p&gt;이번 task 에서는 mesh 트래픽을 모니터링 하기 위한 Istio Dashboard 설정과 사용 방법에 대해 소개한다.
이 task 중에 당신은 istio add-on Grafana 와 Service Mesh 트래픽 데이터를 보기 위한 web-based 인터페이스를 사용하게 될 것이다.&lt;/p&gt;

&lt;h1 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;쿠버네티스 클러스터에 Istio를 설치하세요. 만약 설치하는데 Helm을 사용한다면 Grafana add-on –set grafana.enabled=true 옵션을 활성화 하세요&lt;/li&gt;
  &lt;li&gt;Bookinfo 애플리케이션을 배포하세요&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;istio-dashboard-보기&quot;&gt;Istio Dashboard 보기&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;prometheus 서비스가 클러스터 안에서 실행중인 것을 확인하세요.&lt;br /&gt;
쿠버네티스 환경에서 아래 명령어를 실행하세요.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system get svc prometheus
NAME         CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
prometheus   10.59.241.54   &amp;lt;none&amp;gt;        9090/TCP   2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;클러스터에서 Grafana 서비스가 실행중인 것을 확인하세요
쿠버네티스 환경에서 아래 명령어를 실행하세요.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n istio-system get svc grafana
NAME      CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
grafana   10.59.247.103   &amp;lt;none&amp;gt;        3000/TCP   2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Grafana UI를 통해 Istio Dashboard 를 열어보세요.&lt;br /&gt;
쿠버네티스 환경에서 아래 명령어를 실행하세요.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;웹브라우저에서 &lt;a href=&quot;http://localhost:3000/dasboard/db/istio-mesh-dashboard&quot;&gt;http://localhost:3000/dashboard/db/istio-mesh-dashboard&lt;/a&gt; 방문해보세요.&lt;br /&gt;
Istio Dashboard 다음과 유사하게 보여질 것이다.
&lt;img src=&quot;../assets/images/istio/grafana-istio-dashboard.png&quot; alt=&quot;Istio Dashboard&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Mesh로 트래픽 전송
Bookinfo 샘플의 경우 http://$GATEWAY_URL/productpage 페이지를 웹에서 접속하거나 아래 명령어를 통해 요청하세요.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://$GATEWAY_URL/productpage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$GATEWAY_URL은 Bookinfo 샘플에서 설정된 값입니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;약간의 트래픽을 생성하기 위해 페이지를 몇번 갱신한다. (또는 명령얼 몇번 더 수행한다.)&lt;br /&gt;
Istio Dashboard를 다시 한번 본다. 생성된 트래픽이 반양되어 있어야 한다. 다음과 비슷하게 보여진다.
&lt;img src=&quot;../assets/images/istio/dashboard-with-traffic.png&quot; alt=&quot;dashboard-with-traffic&quot; /&gt;
이 대시보드는 Mesh 안에 있는 서비스와 워크로드와 함께 Mesh 의 전체적인 view를 제공한다.&lt;br /&gt;
당신은 아래 설명된 구체적인 대시보드 탐색을 통해 서비스와 워크로드에 대한 디테일한 정보를 얻을 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;서비스 대시보드 시각화
Grafana 대비보드 왼쪽 코너에 있는 탐색 메뉴로부터 Istio Dashboard 를 탐색하거나 &lt;a href=&quot;http://localhost:3000/dashboard/db/istio-service-dashboard&quot;&gt;http://localhost:3000/dashboard/db/istio-service-dashboard&lt;/a&gt; 웹브라우징하여 방문 가능하다.&lt;br /&gt;
istio 서비스 대시보드는 아래와 유사하다.
&lt;img src=&quot;../assets/images/istio/istio-service-dashboard.png&quot; alt=&quot;istio-service-dashboard.png&quot; /&gt;
이 대시보드는 서비스를 위한 client workloads(서비스를 호출하는 workload)와 service workload(이 서비스를 제공하는 워크로드) 그리고 서비스에 대한 자세한 metrics를 제공한다.&lt;/li&gt;
  &lt;li&gt;워크로드 대시보드 시각화
Grafana 대시보드 왼쪽 코너 탐색 메뉴에서 당신은 Istio 워크로드 대시보드를 탐색하거나 &lt;a href=&quot;http://localhost:3000/dashboard/db/istio-workload-dashboard&quot;&gt;http://localhost:3000/dashboard/db/istio-workload-dashboard&lt;/a&gt; 웹브라우징을 통해 접속 가능하다.&lt;br /&gt;
Istio 워크로드 대시보드는 아래와 유사하다.
&lt;img src=&quot;../assets/images/istio/istio-workload-dashboard.png&quot; alt=&quot;istio-workload-dashboard&quot; /&gt;
이 대시보드는 각 워크로드와 inboud 워크로드(이 워크로드에 요청을 보내는 워크로드) 와 해당 워크로드에 대한 outbound service(이 워크로드가 요청을 전송하는 서비스) 에 대한 자세한 mertics를 제공한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;about-the-grafana-add-on&quot;&gt;About the Grafana add-on&lt;/h1&gt;
&lt;p&gt;Grafana add-on은 Grafana의 사전에 이미 구성된 설정이다. 기본 이미지 (&lt;strong&gt;grafana/grafana:5.2.3&lt;/strong&gt;) Prometheus 데이터 소스와 Istio 대시보드가 설치되어 시작되도록 수정되었다. 특히 istio 와 mixer의 기본 설치 파일은 global(모든 서비스에 사용) metrics 기본 설정으로 제공한다. Istio 대시보드는 기본 istio metric 설정과 Prometheus 백엔드와 결합하여 사용되로독 만들어졌다.&lt;/p&gt;

&lt;p&gt;Istio 대시보드의 주요 3가지 구성&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A Mesh Summary View. 이 세션은 Mesh의 전체적인 요약 관점을 제공하고, Mesh 에서 HTTP/gRPC 그리고 TCP 워크로드를 보여준다.&lt;/li&gt;
  &lt;li&gt;Individual Service View. 이 섹션은 Mesh 안에서 각각의 개별적인 서비스를 위한 요청과 응답에 대한 metrics를 제공한다. 이러한 것은 이 서비스를 위한 클라이언트와 서비스 워크로드에 대한 metrics 또한 제공한다.&lt;/li&gt;
  &lt;li&gt;Individual Workloads View. 이 섹션은 Mesh 안에서 각각의 개별적인 워크로드를 위한 요청과 응답에 대한 mertices를 제공한다. 이러한 뷰는 또한 워크로드를 위한 inbound workload 와 outboud service에 대한 metrics 제공한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;대시보드 생성, 설정, 수정에 대한 좀더 자세한 내용은 &lt;a href=&quot;https://grafana.com/docs/&quot;&gt;Grafana Documendation&lt;/a&gt;을 통해 확인 가능하다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>sysmoon</name>
        
        
      </author>

      

      
        <category term="k8s" />
      

      
        <summary type="html">이번 task 에서는 mesh 트래픽을 모니터링 하기 위한 Istio Dashboard 설정과 사용 방법에 대해 소개한다. 이 task 중에 당신은 istio add-on Grafana 와 Service Mesh 트래픽 데이터를 보기 위한 web-based 인터페이스를 사용하게 될 것이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Istio Telemetry (5. Collecting Logs)</title>
      <link href="/istio-logs_collecting_logs" rel="alternate" type="text/html" title="Istio Telemetry (5. Collecting Logs)" />
      <published>2018-06-03T19:00:00+09:00</published>
      <updated>2018-06-03T19:00:00+09:00</updated>
      <id>/istio-logs_collecting_logs</id>
      <content type="html" xml:base="/istio-logs_collecting_logs">&lt;p&gt;이 task는 Service Mesh를 위해 어떻게 자동 telemetry 수집을 위한 설정을 하는지 보여준다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>sysmoon</name>
        
        
      </author>

      

      
        <category term="k8s" />
      

      
        <summary type="html">이 task는 Service Mesh를 위해 어떻게 자동 telemetry 수집을 위한 설정을 하는지 보여준다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Istio Telemetry (2. Collecting Metric for TCP services)</title>
      <link href="/istio-telemetry_metrics_collecting_metrics_for_tcp_services" rel="alternate" type="text/html" title="Istio Telemetry (2. Collecting Metric for TCP services)" />
      <published>2018-06-03T19:00:00+09:00</published>
      <updated>2018-06-03T19:00:00+09:00</updated>
      <id>/istio-telemetry_metrics_collecting_metrics_for_tcp_services</id>
      <content type="html" xml:base="/istio-telemetry_metrics_collecting_metrics_for_tcp_services">&lt;h1 id=&quot;collecting-metric&quot;&gt;Collecting Metric&lt;/h1&gt;
&lt;p&gt;이번 테스크에서는 서비스 매쉬를 위해 어떻게 telemetry 정보를 자동으로 수집하기 위한 설정을 하는지 보여준다. 마지막 테스크에서는 TCP 서비스를 콜하기 위한 새로운 metric이 활성화 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Istio를 클러스터에 설치 배포하세요.&lt;/li&gt;
  &lt;li&gt;사용하고 있는 K8S 클러스터에 Istio를 설치하고, App을 배포한다. 이 task는 Minxer가 default configuration (–configDefaultNamespace=istio-system) 으로 설정되어 있다고 가정한다.
만약 다른 설정값을 사용하고 있다면, 위 설정으로 업데이트해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collecting-new-telemetry-data&quot;&gt;Collecting new telemetry data&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;새로운 metric 생성과 자동 수집을 위해 아래 YAML 설정 파일을 적용하세요.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f samples/bookinfo/telemetry/tcp-metrics.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;만약 istio &amp;gt;= 1.1.2 이면 다음 설정파일을 대신 사용하세요
kubectl apply -f samples/bookinfo/telemetry/tcp-metrics-crd.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;MongoDB 사용을 위히 Bookinfo를 설정하세요
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;rating&lt;/strong&gt; service v2를 설치합니다.
 만약 automatic sidecar injection 이 활성화 되어있으면, kubectl을 이용하야 간단하게 배포합니다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f samples/bookinfo/platform/kube/bookinfo-ratings-v2.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;만약 수동 sidecar injection을 사용한다면, 다음 명령어를 대신 사용하세요&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo-ratings-v2.yaml)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;mongodb 서비스 설치
 만약 automatic sidecar injection 이 활성화 되어있으면, kubectl을 이용하야 간단하게 배포합니다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f samples/bookinfo/platform/kube/bookinfo-db.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;만약 수동 sidecar injection을 사용한다면, 다음 명령어를 대신 사용하세요&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo-db.yaml)
 service &quot;mongodb&quot; configured
 deployment &quot;mongodb-v1&quot; configured
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Bookinfo 샘플은 각 마이크로서비스 별 다양한 버전을 배포합니다. 그래서 각 서비스 버전별 집합에 대해 정의하고 이에 대한 도착지 규칙과 각 서비스 집합에 대한 로드밸런싱을 위한 도착지 규칙을 생성할 것입니다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;만약 TLS가 활성화되어있다면, 다음 설정을 대신 적용하세요.&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f samples/bookinfo/networking/destination-rule-all-mtls.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;다음 명령어로 도착지 규칙을 확인할 수 있다.&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl get destinationrules -o yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;virtual service 에 있는 subset reference가 도착치 규칙에 의존성을 가지고 있기 때문에, virtual service가 subsets을 참조하기 전데 도착치 규칙이 전파되기까지 잠시 기다린다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;rating&lt;/strong&gt;, ** reviews** virtual service를 생성한다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-db.yaml
 Created config virtual-service/default/reviews at revision 3003
 Created config virtual-service/default/ratings at revision 3004
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;샘플 애플리케이션으로 트래픽을 전송한다.&lt;br /&gt;
Bookinfo 샘플 테스를 위해 http://$GATEWAY_URL/productpage 웹브라우저로 방문하거나 아래 명령어를 실행한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://$GATEWAY_URL/productpage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 metric 값이 생성, 수집되는 것을 확인한다.&lt;br /&gt;
쿠버네티스 환경에서 다음 명령어를 통해 Prometheus를 위한 port-forwarding을 설정한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 9090:9090 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Prometheus UI를 통해 새로운 metric 값을 확인한다.&lt;br /&gt;
제공된 링크는 Prometheus UI를 열고, &lt;strong&gt;istio_mongo_received_bytes&lt;/strong&gt; 값 쿼리를 실행한다.&lt;br /&gt;
&lt;strong&gt;Console&lt;/strong&gt; 탭에 있는 테이블은 아래와 비슷한 entries 를 포함하고 있다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;istio_mongo_received_bytes{destination_version=&quot;v1&quot;,instance=&quot;172.17.0.18:42422&quot;,job=&quot;istio-mesh&quot;,source_service=&quot;ratings-v2&quot;,source_version=&quot;v2&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;understanding-tcp-telemetry-collection&quot;&gt;Understanding TCP telemetry collection&lt;/h1&gt;
&lt;p&gt;이 테스크에서 Mixer가 매쉬 안에 있는 TCP 서비스에게 모든 트래픽에 대한 새로운 metric을 자동으로 생성하고, 보고하도록 지시한 istio 설정을 추가햇습니다.&lt;br /&gt;
Collecting Metrics and Logs Task와 유사하게, 새로운 설정은 instance, handler, rule로 구성되어 있습니다. metric 집한 구성요소의 완벽한 설명을 위한 task를 확인해보세요.&lt;br /&gt;
TCP 서비스의 Metric 집합은 인스턴스에서 사용할 수 있는 제한된 특성 집합에서만 다릅니다.&lt;/p&gt;

&lt;h2 id=&quot;tcp-attributes&quot;&gt;TCP attributes&lt;/h2&gt;
&lt;p&gt;몇몇 TCP-specific 속성들은 istio 에서 TCP 규칙과 컨트롤을 활성화 합니다. 이러한 속성들은 server-side Envoy proxies 에서 생성됩니다. 이러한 속성들은 연결이 살아있을때 (주기적 리포팅), 연결이 수립된 Mixter에게 주기적으로 전송되고, 연결종료를 전송합니다. (마지막 리포트)&lt;br /&gt;
기본 리포트 주기는 10초이고, 최소 1초 이상이어야 합니다. 추가적으로 context 속성들은 규칙안에서
&lt;strong&gt;http&lt;/strong&gt; 와 &lt;strong&gt;tcp&lt;/strong&gt; 프로토콜을 구분할 수 있는 기느을 제공합니다.&lt;br /&gt;
&lt;img src=&quot;../assets/images/istio/tcp_attributes.svg&quot; alt=&quot;TCP attributes&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>sysmoon</name>
        
        
      </author>

      

      
        <category term="k8s" />
      

      
        <summary type="html">Collecting Metric 이번 테스크에서는 서비스 매쉬를 위해 어떻게 telemetry 정보를 자동으로 수집하기 위한 설정을 하는지 보여준다. 마지막 테스크에서는 TCP 서비스를 콜하기 위한 새로운 metric이 활성화 될 것이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Istio Telemetry (1. Collecting Metrics)</title>
      <link href="/istio-telemetry_collecting_metrics" rel="alternate" type="text/html" title="Istio Telemetry (1. Collecting Metrics)" />
      <published>2018-06-03T19:00:00+09:00</published>
      <updated>2018-06-03T19:00:00+09:00</updated>
      <id>/istio-telemetry_collecting_metrics</id>
      <content type="html" xml:base="/istio-telemetry_collecting_metrics">&lt;h1 id=&quot;collecting-metric&quot;&gt;Collecting Metric&lt;/h1&gt;
&lt;p&gt;이번 작업은 Service Mesh를 위해 자동으로 telemetry 정보를 수집하기 위한 istio 설정 방법에 대해 알아본다.
마지막 부분에 Service Mesh 안에서 새로운 서비스를 위한 Metric이 활성화 된다.
Bookinfo 샘플 어플케이션이 이 작업을 위해 예제로 활용되기 때문에 먼저 Bookinfo 애플리케이션이 배포되어 있어야 한다.&lt;/p&gt;

&lt;h1 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;사용하고 있는 쿠버네티스 클러스터에 Istio를 설치하고, App을 배포한다. 이 작업은 Mixer가 default configuration (–configDefaultNamespace=istio-system) 이 설정된 것으로 가정한다.
만약 다른 설정값을 사용하고 있다면, 위 설정으로 업데이트해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;collecting-new-metrics&quot;&gt;Collecting new metrics&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;새로운 metric 정보를 수집하기 위해 YAML 파일을 적용하면, istio는 필요한 리소스를 생성하고, metic 정보를 자동으로 수집한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f samples/bookinfo/telemetry/metrics.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;만약, istio &amp;gt;= 1.1.2 일 경우, 아래 yaml configuration 적용 필요
kubectl apply -f samples/bookinfo/telemetry/metrics-crd.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;samples/bookinfo/telemetry/metrics-crd.yaml
```
    &lt;h1 id=&quot;configuration-for-metric-instances&quot;&gt;Configuration for metric instances&lt;/h1&gt;
    &lt;p&gt;apiVersion: “config.istio.io/v1alpha2”
kind: metric
metadata:
name: doublerequestcount
namespace: istio-system
spec:
value: “2” # count each request twice
dimensions:
  reporter: conditional((context.reporter.kind | “inbound”) == “outbound”, “client”, “server”)
  source: source.workload.name | “unknown”
  destination: destination.workload.name | “unknown”
  message: ‘“twice the fun!”’
monitored_resource_type: ‘“UNSPECIFIED”’
—&lt;/p&gt;
    &lt;h1 id=&quot;configuration-for-a-prometheus-handler&quot;&gt;Configuration for a Prometheus handler&lt;/h1&gt;
    &lt;p&gt;apiVersion: “config.istio.io/v1alpha2”
kind: prometheus
metadata:
name: doublehandler
namespace: istio-system
spec:
metrics:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;name: double_request_count # Prometheus metric name
instance_name: doublerequestcount.metric.istio-system # Mixer instance name (fully-qualified)
kind: COUNTER
label_names:
        &lt;ul&gt;
          &lt;li&gt;reporter&lt;/li&gt;
          &lt;li&gt;source&lt;/li&gt;
          &lt;li&gt;destination&lt;/li&gt;
          &lt;li&gt;
            &lt;h2 id=&quot;message&quot;&gt;message&lt;/h2&gt;
            &lt;h1 id=&quot;rule-to-send-metric-instances-to-a-prometheus-handler&quot;&gt;Rule to send metric instances to a Prometheus handler&lt;/h1&gt;
            &lt;p&gt;apiVersion: “config.istio.io/v1alpha2”
kind: rule
metadata:
name: doubleprom
namespace: istio-system
spec:
actions:&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;handler: doublehandler.prometheus
instances:
        &lt;ul&gt;
          &lt;li&gt;doublerequestcount.metric
```&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;샘플 애플리케이션으로 트래픽 전송
Bookinfo (sample application)에 traffic을 전송한다. Bookinfo App의 경우, browser를 통해 http://$GATEWAY_URL/productpage 브라우징 하거나, 아래와 같이 curl을 이용하여 http request 수행한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://$GATEWAY_URL/productpage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고로 minikube 환경에서 GATEWAY_URL을 설정하기 위한 방법은 아래 스크립트를 참고한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==&quot;http2&quot;)].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==&quot;https&quot;)].nodePort}')
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;새로운 metric 정보가 생생/수집 되고 있는지 확인하다. 쿠버네티스 환경에서 Prometheus를 위한 port-forwarding setup을 위해 다음과 같은 명령어를 실행한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 9090:9090 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;새로운 metric value 값 확인을 위해 &lt;a href=&quot;http://localhost:9090/graph&quot;&gt;Prometheus UI&lt;/a&gt; 웹브라우저 접속하여 확인한다. 위 제공된 링크는 Prometheus UI 페이지를 열어서, istio_double_request_count metric 값을 쿼리를 실행한다. Console Tab 테이블에 표시된 entry 정보는 다음과 비슷하다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;istio_double_request_count{destination=&quot;details-v1&quot;,instance=&quot;172.17.0.12:42422&quot;,job=&quot;istio-mesh&quot;,message=&quot;twice the fun!&quot;,reporter=&quot;client&quot;,source=&quot;productpage-v1&quot;}   8
istio_double_request_count{destination=&quot;details-v1&quot;,instance=&quot;172.17.0.12:42422&quot;,job=&quot;istio-mesh&quot;,message=&quot;twice the fun!&quot;,reporter=&quot;server&quot;,source=&quot;productpage-v1&quot;}   8
istio_double_request_count{destination=&quot;istio-policy&quot;,instance=&quot;172.17.0.12:42422&quot;,job=&quot;istio-mesh&quot;,message=&quot;twice the fun!&quot;,reporter=&quot;server&quot;,source=&quot;details-v1&quot;}   4
istio_double_request_count{destination=&quot;istio-policy&quot;,instance=&quot;172.17.0.12:42422&quot;,job=&quot;istio-mesh&quot;,message=&quot;twice the fun!&quot;,reporter=&quot;server&quot;,source=&quot;istio-ingressgateway&quot;}   4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;더 많은 metric value 값을 Prometheus에서 쿼리하기 위해 &lt;a href=&quot;&amp;quot;http://istio.io/docs/tasks/telemetry/metrics/querying-metrics&quot;&gt;Querying Istio Metrics&lt;/a&gt;을 참고한다.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-metrics-configuration&quot;&gt;Understanding the metrics configuration&lt;/h1&gt;
&lt;p&gt;이번 작업에서는 Service Mesh 에서 발생하는 모든 트랙픽에 대한 새로운 metric 정보를 자동으로 생성하고 리포팅하기 위한 설정을 Mixer에 추가했다.
추가된 설정은 Mixer 기능의 3가지 부분을 컨트롤한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;istio attribute 에서 instance(이 예제에서는 metric 값) 생성&lt;/li&gt;
  &lt;li&gt;생성된 인스터스를 processing 할 수 있는 handlers 생성&lt;/li&gt;
  &lt;li&gt;Rule Set에 따라 인스턴스를 handlers 로 전송&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;metrics configuration은 Mixer 가 Prometheus 로 metric value 값을 전달하도록 명시합니다. 이를 위해 3가지 블럭 구성을 사용합니다. instance configuration, handler configuration, and rule configuration.&lt;/p&gt;

&lt;p&gt;The Kind: instance 블럭은 doublerequestcount라는 새로운 메트릭에 대해 생성 된 메트릭 값(또는 인스턴스)에 대한 스키마를 정의합니다. 이 인스턴스 설정은 Mixer에게 Envoy에 의해 보고되는 속성 (및 Mixer 자체에 의해 생성되는 속성)에 근거 해, 임의의 request에 대해서 메트릭 값 생성하는 방법을 지시한다.&lt;/p&gt;

&lt;p&gt;doublerequestcout에 대한 각각의 instance에 대해, 설정은 Mixer가 각 instance 에 대해 값 2를 지원하도록 명시한다. 이유는 Istio는 각각의 request에 대해 instance를 생성하는데, 이건 이 metric 이 수신받은 총 request 수의 2배를 저장하기 때문이다.&lt;/p&gt;

&lt;p&gt;각각의 doublerequestcount에 대한 dimensions 구성은 구체화 되어있다. Dimesions은 다른 필요성과 질의 방향에 따라 metric 데이터를 자르고, 수집하고, 분석하는 방법을 제공한다. 예를들어 특정 응용프로그램 동작 문제를 해결할때 특정 대상 서비스에 대한 요청만 고려하는 것이 바람직할 수 있다.&lt;/p&gt;

&lt;p&gt;설정은 속성 값 및 기본값을 기반으로 이러한 차원의 값을 채우도록 Mixer에 지시합니다. 예를 들어 source dimension의 경우 새로운 구성은 source.workload.name 특성에서 값을 가져 오도록 요청합니다. 그 속성값이 설정되어 있지 않은 경우, 규칙은 Mixer에 디폴트 값 “unknown”을 사용하도록 지시합니다. message dimesion의 경우 기본값 “twice the fun!” 모든 인스턴스에 사용됩니다.&lt;/p&gt;

&lt;p&gt;handler 구성 블록은 &lt;strong&gt;doublehandler&lt;/strong&gt; 라는 hander를 정의한다. handler spec은 Prometheus 어댑터 코드가 받은 메트릭 인스턴스를 Prometheus 백엔드에서 처리 할 수있는 Prometheus 형식의 값으로 변환하는 방법을 구성한다. 이 구성은 &lt;strong&gt;double_request_count&lt;/strong&gt; 이름의 새로운 Prometheus Metric 이름을 명시했다. Prometheus adapter는 &lt;strong&gt;istio_&lt;/strong&gt; 네임스페이스를 접두어로 붙였는데, 이 metric 정보는 Prometheus 에서 &lt;strong&gt;istio_double_request_count&lt;/strong&gt; 로 보여질 것이다. metric은 &lt;strong&gt;doublerequestcount&lt;/strong&gt; instances를 위한 3가지 라벨 매칭 dimention 설정을 가지고 있다.&lt;/p&gt;

&lt;p&gt;Mixer 인스턴스는 instance_name 매개 변수를 통해 Prometheus 메트릭과 일치합니다. instance_name은 Mixer instances(exmaple: doublerequestcount.instance.istio-system)을 위해 fully-qualified 이름이어야 합니다.&lt;/p&gt;

&lt;p&gt;rule 구성은 &lt;strong&gt;doubleprom&lt;/strong&gt; 라는 새로운 규칙을 정의합니다. 이 rule은 Mixer가 모든 doublerequestcount instance를 &lt;strong&gt;doublehandler&lt;/strong&gt; handler로 전송하도록 설정합니다. rule 안에 match 절이 없기 때문에 그리고 rule은 네임스페이스(istio-system) 안에서 default configuration 설정되었기 때문에 rule은 service mesh 안에 있는 모든 request에 대해 동작한다.&lt;/p&gt;

&lt;h1 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;new metric configuraiton 설정을 삭제한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete -f samples/bookinfo/telemetry/metrics.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;만약 istio version &amp;gt;= 1.1.2 이면&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete -f samples/bookinfo/telemetry/metrics-crd.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬에서 실행되어 동작중인 kubectl port-forward 프로세스를 죽인다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;killall kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이어지는 후속 task 작업을 계속 진행할 것이 아니라면, &lt;a href=&quot;https://istio.io/docs/examples/bookinfo/#cleanup&quot;&gt;Bookinfo cleanup&lt;/a&gt; 내용을 참고하여 bookinfo 관련 애플리케이션을 shtudown 한다.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>sysmoon</name>
        
        
      </author>

      

      
        <category term="k8s" />
      

      
        <summary type="html">Collecting Metric 이번 작업은 Service Mesh를 위해 자동으로 telemetry 정보를 수집하기 위한 istio 설정 방법에 대해 알아본다. 마지막 부분에 Service Mesh 안에서 새로운 서비스를 위한 Metric이 활성화 된다. Bookinfo 샘플 어플케이션이 이 작업을 위해 예제로 활용되기 때문에 먼저 Bookinfo 애플리케이션이 배포되어 있어야 한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Istio Telemetry (3. Querying Metrics from Prometheus)</title>
      <link href="/istio-telemetry_querying_metrics_from_prometheus" rel="alternate" type="text/html" title="Istio Telemetry (3. Querying Metrics from Prometheus)" />
      <published>2018-05-28T19:00:00+09:00</published>
      <updated>2018-05-28T19:00:00+09:00</updated>
      <id>/istio-telemetry_querying_metrics_from_prometheus</id>
      <content type="html" xml:base="/istio-telemetry_querying_metrics_from_prometheus">&lt;h1 id=&quot;collecting-metric&quot;&gt;Collecting Metric&lt;/h1&gt;
&lt;p&gt;이번 테스크에서는 Prometheus를 활용헤ㅐ서 istion를 위한 쿼리를 어떻게 하는지 보여준다.&lt;br /&gt;
이 테스크의 일 부분으로써 metric 값 쿼리를 위한 web-based 인터페이스를 사용할 계획이다.&lt;br /&gt;
이 task 전체에서 Bookinfo 샘플 애플리케이션이 사용된다.&lt;/p&gt;

&lt;h1 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h1&gt;
&lt;p&gt;쿠버네티스 클러스에 istion를 설치하고, Bookinfo 샘플 애플리케이션을 배포하세요.&lt;/p&gt;

&lt;h1 id=&quot;querying-istio-metrics&quot;&gt;Querying Istio Metrics&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;클러스터에서 Prometheus 서비스가 동작하고 있는지 확인한다.&lt;br /&gt;
쿠버네티스 환경에서, 아래와 같은 명령어을 실행한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system get svc prometheus
NAME         CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
prometheus   10.59.241.54   &amp;lt;none&amp;gt;        9090/TCP   2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스 매쉬로 트래픽을 전송한다.&lt;br /&gt;
Bookinfo 샘플 애플리케이션을 위해, http://$GATEWAY_URL/productpage 웹브라우저 또는 아래 명령어를 통해 접속한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://$GATEWAY_URL/productpage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$GATEWAY_URL 은 Bookinfo 예쩨를 위한 환경변수 설정 값이다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Prometheus UI를 오픈한다.&lt;br /&gt;
쿠버네티스 환경에서, 아래와 같은 명령어를 실행한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=prometheus -o jsonpath='{.items[0].metadata.name}') 9090:9090 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;브러우저를 통해 &lt;a href=&quot;http://localhost:9090/graph&quot;&gt;http://localhost:9090/graph&lt;/a&gt; 접속한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Promethues 쿼리를 실행한다.
웹페이지 상단 “Expression” 입력창에 아래 텍스트 &lt;strong&gt;istio_requests_totla&lt;/strong&gt; 를 입력한다.&lt;br /&gt;
그리고 &lt;strong&gt;Execute&lt;/strong&gt; 버튼을 클릭한다.&lt;br /&gt;
결과는 아라와 유사하게 나올 것이다.
![Prometheus Query Result][../assets/images/istio/prometheus_query_result.png]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다른 쿼리를 시도해보면:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;productpage&lt;/strong&gt; 서비스에게 전송한 모든 요청 횟수
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;istio_requests_total{destination_service=&quot;productpage.default.svc.cluster.local&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;reviews&lt;/strong&gt; v3 서비스로 전송된 모든 요청 횟수
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;istio_requests_total{destination_service=&quot;reviews.default.svc.cluster.local&quot;, destination_version=&quot;v3&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;이 쿼리는 현재까지 v3 &lt;strong&gt;reviews&lt;/strong&gt; 서비스에게 전송된 모든 요청 횟수를 결과로 리턴한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rate(istio_requests_total{destination_service=~&quot;productpage.*&quot;, response_code=&quot;200&quot;}[5m])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;about-the-promethues-add-on&quot;&gt;About the Promethues add-on&lt;/h1&gt;
&lt;p&gt;Mixer는 생성된 mertic 값을 전달하기 위한 end-point 주소를 외부에 오픈하기 위한 &lt;strong&gt;Prometheus&lt;/strong&gt; 어댑터를 내장하고 있다. Prometheus add-on은 Prometheus 서버가 노출된 metric 정보를 수집하기 위해 Mixer endpoint 를 통해 스크래핑하기 위해 사전 설정된다. Prometheus는 Istion metrics 정보들을 쿼리하고 영구적으로 저장하기 위한 메카니즘을 제공한다.&lt;/p&gt;

&lt;p&gt;설정된 Prometheus add-on은 다음과 같은 endpoint를 수집한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;istio-telemetry.istio-system:42422:&lt;/strong&gt; &lt;strong&gt;istio-mesh&lt;/strong&gt; job은 Mixer 에서 생성된 모든 mertics 정보를 리턴한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;istio-telemetry.istio-system:10514:&lt;/strong&gt; &lt;strong&gt;istio-telemetry&lt;/strong&gt; job은 Mixer-specific metrics 값을 리턴한다. 이 endpoint 주소를 활용하여 Mixer 자체를 모니터링하는 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;istio-proxy:15090:&lt;/strong&gt; &lt;strong&gt;envoy-stats&lt;/strong&gt; 는 Envoy에서 생성된 raw 통계값을 리턴합니다.&lt;br /&gt;
Prometheus는 pods애 있는 envoy-porm 노출된 endpoint 를 바라보도록 설정되어 있습니다. add-on 구성은 add-on 프로세스에 의한 데이터의 크기를 제한하기 위해 수집하는 동안 다수의 Envoy Metrics 정보를 걸러냅니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;istio-pilot.istio-system:10514:&lt;/strong&gt; &lt;strong&gt;pilot&lt;/strong&gt; job은 Pilot-generated 메트릭을 리턴합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;istio-galley.istio-system:10514:&lt;/strong&gt; &lt;strong&gt;gallery&lt;/strong&gt;는 모든 Gallery-generaed metrics 값을 리턴합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;istio-policy.istio-system:10514:&lt;/strong&gt; &lt;strong&gt;istio-policy&lt;/strong&gt;는 모든 policy와 관련된 metrics 값을 리턴합니다.&lt;br /&gt;
Prometheus 쿼리를 위한 좀더 제사한 정보는, &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot;&gt;querying docs&lt;/a&gt; 문서를 참고하세요&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>sysmoon</name>
        
        
      </author>

      

      
        <category term="k8s" />
      

      
        <summary type="html">Collecting Metric 이번 테스크에서는 Prometheus를 활용헤ㅐ서 istion를 위한 쿼리를 어떻게 하는지 보여준다. 이 테스크의 일 부분으로써 metric 값 쿼리를 위한 web-based 인터페이스를 사용할 계획이다. 이 task 전체에서 Bookinfo 샘플 애플리케이션이 사용된다.</summary>
      

      
      
    </entry>
  
</feed>
